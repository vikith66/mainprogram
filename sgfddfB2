/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package bank;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;
import java.sql.ResultSet;

public class Bank {
    private static final String DB_URL = "jdbc:mysql://localhost/bank";
    private static final String USER = "root";
    private static final String PASSWORD = "";

    public static void main(String args[]) {
        try {
            Scanner sc = new Scanner(System.in);
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASSWORD);
            int choice;
            do {
                System.out.println("\nMENU:");
                System.out.println("1.Add New account");
                System.out.println("2.Deposit");
                System.out.println("3.Withdraw");
                System.out.println("4.Display");
                System.out.println("5.Exit");
                System.out.println("Enter your choice");
                choice = sc.nextInt();
                switch (choice) {
                    case 1:
                        addaccount(connection, sc);
                        break;
                    case 2:
                        deposit(connection, sc);
                        break;
                    case 3:
                        withdraw(connection, sc);
                        break;
                    case 4:
                        display(connection);
                        break;
                    case 5:
                        System.out.println("Exiting Program");
                        break;
                    default:
                        System.out.println("Invalid Choice!");
                }
            } while (choice != 5);
        } catch (SQLException e) {
            System.err.println("Error...:" + e.getMessage());
        }
    }

    public static void addaccount(Connection connection, Scanner sc) {
        System.out.println("Enter account number:");
        int accno = sc.nextInt();
        System.out.println("Enter accountholder Name");
        String name = sc.next();
        System.out.println("Enter balance:");
        int bal = sc.nextInt();
        try {
            String query = "SELECT * FROM bankdb WHERE accno=?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setInt(1, accno);
            ResultSet rowsAffected = statement.executeQuery();
            if (rowsAffected.next()) {
                System.out.println("Record Already Inserted");
            } else {
                query = "INSERT INTO bankdb(accno, accname, bal) VALUES(?, ?, ?)";
                statement = connection.prepareStatement(query);
                statement.setInt(1, accno);
                statement.setString(2, name);
                statement.setInt(3, bal);
                statement.executeUpdate();
                System.out.println("Record Added Successfully");
                statement.close();
            }
        } catch (SQLException e) {
            System.out.println("Error adding record:" + e.getMessage());
        }
    }

    public static void display(Connection connection) {
        try {
            String query = "SELECT * FROM bankdb";
            java.sql.Statement statement = connection.createStatement();
            ResultSet resultset = statement.executeQuery(query);
            System.out.println("\nRECORDS:");
            while (resultset.next()) {
                int no = resultset.getInt("accno");
                String name = resultset.getString("accname");
                int bal = resultset.getInt("bal");
                System.out.println("Accno:" + no + ", Name:" + name + ", Balance:" + bal);
            }
            resultset.close();
            statement.close();
        } catch (SQLException e) {
            System.out.println("Error displaying records:" + e.getMessage());
        }
    }

    public static void deposit(Connection connection, Scanner sc) {
        try {
            System.out.println("Enter account number:");
            int accno = sc.nextInt();
            String query1 = "SELECT * FROM bankdb WHERE accno=?";
            PreparedStatement st1 = connection.prepareStatement(query1);
            st1.setInt(1, accno);
            ResultSet rowsAffected1 = st1.executeQuery();
            if (!rowsAffected1.next()) {
                System.out.println("No such Account");
            } else {
                System.out.println("Enter amount:");
                int bal = sc.nextInt();
                String query = "UPDATE bankdb SET bal=bal+? WHERE accno=?";
                PreparedStatement statement = connection.prepareStatement(query);
                statement.setInt(1, bal);
                statement.setInt(2, accno);
                statement.executeUpdate();
                System.out.println("Amount is deposited");
                statement.close();
            }
        } catch (SQLException e) {
            System.out.println("Error updating student address:" + e.getMessage());
        }
    }

    public static void withdraw(Connection connection, Scanner sc) throws SQLException {
        System.out.println("Enter account number:");
        int accno = sc.nextInt();
        String query2 = "SELECT * FROM bankdb WHERE accno=?";
        PreparedStatement st2 = connection.prepareStatement(query2);
        st2.setInt(1, accno);
        ResultSet rowsAffected1 = st2.executeQuery();
        if (!rowsAffected1.next()) {
            System.out.println("No such Account");
        } else {
            System.out.println("Enter amount to withdraw:");
            int bal = sc.nextInt();
            try {
                if (bal > 0) {
                    String q = "SELECT bal FROM bankdb WHERE accno=?";
                    PreparedStatement st = connection.prepareStatement(q);
                    st.setInt(1, accno);
                    ResultSet rowsAffected = st.executeQuery();
                    if (!rowsAffected.next()) {
                        System.out.println("No such Account");
                    } else {
                        int balance = rowsAffected.getInt("bal");
                        int rem = balance - bal;
                        if (rem <= 500) {
                            System.out.println("Min balance won't be maintained. Current balance is " + balance);
                            return;
                        } else {
                            String query = "UPDATE bankdb SET bal=bal-? WHERE accno=?";
                            PreparedStatement statement = connection.prepareStatement(query);
                            statement.setInt(1, bal);
                            statement.setInt(2, accno);
                            statement.executeUpdate();
                            System.out.println("Amount is withdrawn");
                            statement.close();
                        }
                    }
                } else {
                    System.out.println("Withdrawal amount should be greater than 0");
                }
            } catch (SQLException e) {
                System.out.println("Error updating student address:" + e.getMessage());
            }
        }
    }
}

public static void withdraw(Connection connection, Scanner sc) {
    System.out.println("Enter account number:");
    int accno = sc.nextInt();
    String queryCheck = "SELECT bal FROM bankdb WHERE accno=?";
    
    try (PreparedStatement checkStmt = connection.prepareStatement(queryCheck)) {
        checkStmt.setInt(1, accno);
        ResultSet rs = checkStmt.executeQuery();
        
        if (!rs.next()) {
            System.out.println("No such Account");
            return;
        }
        
        int currentBalance = rs.getInt("bal");
        System.out.println("Enter amount to withdraw:");
        int withdrawAmount = sc.nextInt();
        
        if (withdrawAmount <= 0) {
            System.out.println("Withdrawal amount should be greater than 0");
            return;
        }
        
        int remainingBalance = currentBalance - withdrawAmount;
        
        if (remainingBalance < 500) {
            System.out.println("Min balance won't be maintained. Current balance is " + currentBalance);
            return;
        }
        
        String queryWithdraw = "UPDATE bankdb SET bal=bal-? WHERE accno=?";
        try (PreparedStatement withdrawStmt = connection.prepareStatement(queryWithdraw)) {
            withdrawStmt.setInt(1, withdrawAmount);
            withdrawStmt.setInt(2, accno);
            withdrawStmt.executeUpdate();
            System.out.println("Amount is withdrawn");
        }
        
    } catch (SQLException e) {
        System.out.println("Error updating account balance: " + e.getMessage());
    }
}
